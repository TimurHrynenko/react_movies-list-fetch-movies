{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/requests.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","addMovie","resetMovieAlreadyInList","isNewMovieAlreadyInList","useState","setTitle","setMovie","staus","message","titleError","setTitleError","onSubmit","event","preventDefault","about","htmlFor","type","id","placeholder","classNames","status","value","onChange","titleChangeHandler","target","onClick","fetch","then","response","json","requestByTitle","Title","Plot","Poster","imdbID","Response","Error","catch","err","Object","values","some","App","data","setMovies","setNewMovieAlreadyInList","newMovie","find","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3ea3f583.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\nimport { requestByTitle } from '../../api/requests';\n\nexport const FindMovie = ({\n  addMovie,\n  resetMovieAlreadyInList,\n  isNewMovieAlreadyInList,\n}) => {\n  const [title, setTitle] = useState('');\n\n  const [movie, setMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n  });\n\n  const [titleError, setTitleError] = useState({\n    staus: false,\n    message: '',\n  });\n\n  const titleChangeHandler = ({ value }) => {\n    setTitle(value);\n    setTitleError({\n      staus: false,\n      message: '',\n      about: '',\n    });\n    resetMovieAlreadyInList();\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    addMovie(movie);\n    setMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n    });\n    setTitleError({\n      staus: false,\n      message: '',\n      about: '',\n    });\n  };\n\n  const findMovieHandler = () => {\n    requestByTitle(title)\n      .then(({ Title, Plot, Poster, imdbID, Response, Error }) => {\n        if (Response === 'True') {\n          setMovie({\n            title: Title,\n            description: Plot,\n            imgUrl: Poster,\n            imdbUrl: `https://www.imdb.com/title/${imdbID}`,\n            imdbId: imdbID,\n          });\n          setTitle('');\n        } else {\n          setTitleError({\n            status: true,\n            message: 'Incorrect title',\n            about: Error,\n          });\n        }\n      })\n      .catch((err) => {\n        setTitleError({\n          status: true,\n          message: 'Failed to load the movie',\n          about: err.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={submitHandler}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames(\n                'input',\n                { 'is-danger': titleError.status },\n              )}\n              value={title}\n              onChange={({ target }) => titleChangeHandler(target)}\n            />\n          </div>\n\n          {titleError.status && (\n            <p className=\"help is-danger\">\n              {titleError.message}\n            </p>\n          )}\n\n          {isNewMovieAlreadyInList && (\n            <p className=\"help is-danger\">\n              Movie is already in the list\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={findMovieHandler}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-primary\"\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {Object.values(movie).some(value => value)\n          ? <MovieCard {...movie} />\n          : 'No movie to show'\n        }\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  resetMovieAlreadyInList: PropTypes.func.isRequired,\n  isNewMovieAlreadyInList: PropTypes.bool.isRequired,\n};\n","const API_KEY = 'ed153c24';\nconst API_URL = 'https://www.omdbapi.com';\n\nexport const requestByTitle = title => fetch(\n  `${API_URL}/?apikey=${API_KEY}&t=${title}`,\n)\n  .then(response => response.json());\n","import React, { useState } from 'react';\n\nimport './App.scss';\n\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, setMovies] = useState(data);\n  const [isNewMovieAlreadyInList, setNewMovieAlreadyInList] = useState(false);\n\n  const resetMovieAlreadyInList = () => {\n    setNewMovieAlreadyInList(false);\n  };\n\n  const addMovie = (newMovie) => {\n    if (movies.find(movie => movie.imdbId === newMovie.imdbId)) {\n      setNewMovieAlreadyInList(true);\n\n      return;\n    }\n\n    setMovies(movies.concat(newMovie));\n\n    resetMovieAlreadyInList();\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          resetMovieAlreadyInList={resetMovieAlreadyInList}\n          isNewMovieAlreadyInList={isNewMovieAlreadyInList}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}